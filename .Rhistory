theme_linedraw()+
theme(panel.grid=element_blank())
plot_grid(gg1, gg2)
gg1 <-
ggplot(myoV)+
geom_histogram(aes(x=force, y=stat(density), fill=conditions2),
color="black",
show.legend=FALSE
)+
ggtitle("Forces")+
xlab("piconewtons")+
facet_grid(pi+pn_nm3~myo)+
scale_fill_manual(values=plot_colors2)+
theme_linedraw()+
theme(panel.grid=element_blank())
gg2 <-
ggplot(myoV)+
geom_histogram(aes(x=displacement_nm, y=stat(density), fill=conditions2),
color="black",
show.legend=FALSE
)+
ggtitle("Displacements")+
xlab("nanometers")+
facet_grid(pi+pn_nm3~myo)+
scale_fill_manual(values=plot_colors2)+
theme_linedraw()+
theme(panel.grid=element_blank())
plot_grid(gg1, gg2)
library(data.table)
library(ggplot2)
library(cowplot)
library(RColorBrewer)
library(magick)
library(ggridges)
library(ggtext)
library(svg)
library(drc)
library(readxl)
library(randomcoloR)
library(dplyr)
# read in data
myoV <- fread("data/MyoV_Pi_Rebind_Events4.csv")
# rename conditions for consistent style/format
# MYOSIN_PI_POWER
myoV$conditions2 <- ifelse(myoV$conditions == "S217A", "S217A_0mM-Pi_1.5-W",
ifelse(myoV$conditions == "S217A 30mM Pi","S217A_30mM-Pi_1.5-W",
ifelse(myoV$conditions == "S217A 30mM Pi 2W", "S217A_30mM-Pi_2-W",
ifelse(myoV$conditions == "S217A 30mM Pi_3W", "S217A_30mM-Pi_3-W",
ifelse(myoV$conditions == "WT", "WT_0mM-Pi_1.5-W",
ifelse(myoV$conditions == "WT 30mM Pi", "WT_30mM-Pi_1.5-W",
ifelse(myoV$conditions == "WT 30mM Pi 2W", "WT_30mM-Pi_2-W",
ifelse(myoV$conditions == "WT 30mM Pi_3W", "WT_30mM-Pi_3-W", "un-labeled"
)
)
)
)
)
)
)
)
myoV$conditions2 <- factor(myoV$conditions2, levels = c("WT_0mM-Pi_1.5-W",
"WT_30mM-Pi_1.5-W",
"WT_30mM-Pi_2-W",
"WT_30mM-Pi_3-W",
"S217A_0mM-Pi_1.5-W",
"S217A_30mM-Pi_1.5-W",
"S217A_30mM-Pi_2-W",
"S217A_30mM-Pi_3-W"))
# define a helper function
splitConditions <- function(x, n){
strsplit(x, split = "_", fixed = TRUE)[[1]][[n]]
}
# add new columns
myoV$myo <- sub("_.*", "", myoV$conditions2)
myoV$prettyConditions <- gsub("_", " ", myoV$conditions2)
myoV$prettyConditions <- factor(myoV$prettyConditions, levels = gsub("_", " ", c("WT_0mM-Pi_1.5-W",
"WT_30mM-Pi_1.5-W",
"WT_30mM-Pi_2-W",
"WT_30mM-Pi_3-W",
"S217A_0mM-Pi_1.5-W",
"S217A_30mM-Pi_1.5-W",
"S217A_30mM-Pi_2-W",
"S217A_30mM-Pi_3-W")))
myoV$myo <- factor(myoV$myo, levels = c("WT", "S217A"))
myoV$pi  <- sapply(as.character(myoV$conditions2), splitConditions, n = 2)
myoV$power <- sapply(as.character(myoV$conditions2), splitConditions, n = 3)
myoV$piPower <- paste0(myoV$pi, "_", myoV$power)
myoV$power2  <- sub("-.*", "", myoV$power)
myoV$velocity  <- myoV$displacement_nm / myoV$time_on_ms
myoV$pn_nm <- ifelse(myoV$power2 == 1.5, "0.04 \n pN/nm",
ifelse(myoV$power2 == 2, "0.06 \n  pN/nm",
ifelse(myoV$power2 == 3, "0.1 \n pN/nm", NA)))
myoV$pn_nm2 <- ifelse(myoV$power2 == 1.5, 0.04,
ifelse(myoV$power2 == 2, 0.06,
ifelse(myoV$power2 == 3, 0.1, NA)))
myoV$pn_nm3 <- ifelse(myoV$power2 == 1.5, "0.04 pN/nm",
ifelse(myoV$power2 == 2, "0.06 pN/nm",
ifelse(myoV$power2 == 3, "0.1 pN/nm", NA)))
myoV$force <- myoV$displacement_nm*myoV$pn_nm2
View(myoV)
ned <-
myoV %>%
dplyr::select(myo, pi, power, displacement_nm, time_on_ms, force)
View(ned)
fwrite(ned, "data/ned.csv")
library(data.table)
library(ggplot2)
library(cowplot)
library(RColorBrewer)
library(magick)
library(ggridges)
library(ggtext)
library(svg)
library(drc)
library(readxl)
library(randomcoloR)
library(dplyr)
# read in data
myoV <- fread("data/MyoV_Pi_Rebind_Events4.csv")
# rename conditions for consistent style/format
# MYOSIN_PI_POWER
myoV$conditions2 <- ifelse(myoV$conditions == "S217A", "S217A_0mM-Pi_1.5-W",
ifelse(myoV$conditions == "S217A 30mM Pi","S217A_30mM-Pi_1.5-W",
ifelse(myoV$conditions == "S217A 30mM Pi 2W", "S217A_30mM-Pi_2-W",
ifelse(myoV$conditions == "S217A 30mM Pi_3W", "S217A_30mM-Pi_3-W",
ifelse(myoV$conditions == "WT", "WT_0mM-Pi_1.5-W",
ifelse(myoV$conditions == "WT 30mM Pi", "WT_30mM-Pi_1.5-W",
ifelse(myoV$conditions == "WT 30mM Pi 2W", "WT_30mM-Pi_2-W",
ifelse(myoV$conditions == "WT 30mM Pi_3W", "WT_30mM-Pi_3-W", "un-labeled"
)
)
)
)
)
)
)
)
myoV$conditions2 <- factor(myoV$conditions2, levels = c("WT_0mM-Pi_1.5-W",
"WT_30mM-Pi_1.5-W",
"WT_30mM-Pi_2-W",
"WT_30mM-Pi_3-W",
"S217A_0mM-Pi_1.5-W",
"S217A_30mM-Pi_1.5-W",
"S217A_30mM-Pi_2-W",
"S217A_30mM-Pi_3-W"))
# define a helper function
splitConditions <- function(x, n){
strsplit(x, split = "_", fixed = TRUE)[[1]][[n]]
}
# add new columns
myoV$myo <- sub("_.*", "", myoV$conditions2)
myoV$prettyConditions <- gsub("_", " ", myoV$conditions2)
myoV$prettyConditions <- factor(myoV$prettyConditions, levels = gsub("_", " ", c("WT_0mM-Pi_1.5-W",
"WT_30mM-Pi_1.5-W",
"WT_30mM-Pi_2-W",
"WT_30mM-Pi_3-W",
"S217A_0mM-Pi_1.5-W",
"S217A_30mM-Pi_1.5-W",
"S217A_30mM-Pi_2-W",
"S217A_30mM-Pi_3-W")))
myoV$myo <- factor(myoV$myo, levels = c("WT", "S217A"))
myoV$pi  <- sapply(as.character(myoV$conditions2), splitConditions, n = 2)
myoV$power <- sapply(as.character(myoV$conditions2), splitConditions, n = 3)
myoV$piPower <- paste0(myoV$pi, "_", myoV$power)
myoV$power2  <- sub("-.*", "", myoV$power)
myoV$velocity  <- myoV$displacement_nm / myoV$time_on_ms
myoV$pn_nm <- ifelse(myoV$power2 == 1.5, "0.04 \n pN/nm",
ifelse(myoV$power2 == 2, "0.06 \n  pN/nm",
ifelse(myoV$power2 == 3, "0.1 \n pN/nm", NA)))
myoV$pn_nm2 <- ifelse(myoV$power2 == 1.5, 0.04,
ifelse(myoV$power2 == 2, 0.06,
ifelse(myoV$power2 == 3, 0.1, NA)))
myoV$pn_nm3 <- ifelse(myoV$power2 == 1.5, "0.04 pN/nm",
ifelse(myoV$power2 == 2, "0.06 pN/nm",
ifelse(myoV$power2 == 3, "0.1 pN/nm", NA)))
myoV$force <- myoV$displacement_nm*myoV$pn_nm2
# myoV$force_conversion <-  myoV$force/myoV$displacement_nm
# hm <- myoV[, .(conditions, date, obs, displacement_nm, force, force_conversion)]
# summarize data {data.table} style
# this does the same as group_by()%>%summarize()
dataSummary <- myoV[,
.(displacementAvg = mean(displacement_nm),
displacementSD = sd(displacement_nm),
displacementSE = (sd(displacement_nm)/sqrt(.N)),
forceAvg = mean(force),
forceSE = (sd(force)/sqrt(.N)),
forceSD = sd(force),
timeOnAvg = mean(time_on_ms),
timeOnSD = sd(time_on_ms),
timeOnSE = (sd(time_on_ms)/sqrt(.N)),
rateAvg =  ( 1 / mean(time_on_ms) ) * 1000,
rateSE = (( 1 / sd(time_on_ms )) * 1000) / sqrt(.N),
timeOffAvg = mean(time_off_ms, na.rm = TRUE),
timeOffSD = sd(time_off_ms, na.rm = TRUE),
trapStiffnessAvg = mean(trap_stiffness, na.rm = TRUE),
velocityAvg = mean(velocity, na.rm = TRUE),
velocitySE = (sd(velocity)/sqrt(.N))),
by = list(conditions2, myo, pi, power, power2, piPower, pn_nm, pn_nm2, pn_nm3, prettyConditions)]
# get some pretty colors
reds  <- RColorBrewer::brewer.pal(9, "Reds")
blues  <- RColorBrewer::brewer.pal(9, "Blues")
plot_colors <- c(blues[[4]], blues[[5]], blues[[7]], blues[[9]],
reds[[4]], reds[[5]], reds[[7]], reds[[9]])
plot_colors2 <- c(blues[[5]], blues[[5]], blues[[7]], blues[[9]],
reds[[5]], reds[[5]], reds[[7]], reds[[9]])
plot_colors3 <- c("grey40", blues[[5]], blues[[7]], blues[[9]],
"grey40", reds[[5]], reds[[7]], reds[[9]])
plot_colors4 <- c( blues[[5]], blues[[7]], blues[[9]],
blues[[5]], blues[[5]], blues[[7]], blues[[9]],
reds[[5]], reds[[5]], reds[[7]], reds[[9]]
)
load_dep_data <- dataSummary[pi == "30mM-Pi" & myo == "WT", .(myo, pi, power, forceAvg, rateAvg)]
wt0 <- data.frame(myo="WT",
pi="0mM-Pi",
power=1.5,
forceAvg=0)
kT <-  4.10
fit <- nls(rateAvg ~ k0*exp((forceAvg*d) / 4.10 ), data = load_dep_data, start = list(k0=1, d=4))
predict_fit <- data.frame(y = predict(fit, newdata=data.frame(forceAvg=seq(0, 4.1, by = 0.01))),
x = seq(0, 4.1, by=0.01))
load_dep_data2 <- dataSummary[pi == "30mM-Pi" & myo == "S217A"]
fit2 <- nls(rateAvg ~ k0*exp((forceAvg*d) / 4.10 ), data = load_dep_data2, start = list(k0=1, d=4))
predict_fit2 <- data.frame(y = predict(fit2, newdata=data.frame(forceAvg=seq(0, 2.5, by = 0.01))),
x = seq(0, 2.5, by=0.01))
(ggLoad <-
ggplot(data = dataSummary[pi == "30mM-Pi"], aes(x = forceAvg)) +
geom_line(data=predict_fit, aes(x = x, y = y), color = blues[[9]], size = 0.7)+
geom_line(data=predict_fit2, aes(x = x, y = y), color = reds[[9]],  size = 0.7)+
geom_point(aes(y = rateAvg,
color = conditions2),
size = 1.5)+
geom_errorbar(aes(ymin = rateAvg - rateSE,
ymax = rateAvg + rateSE,
color = conditions2))+
geom_errorbarh(aes(y = rateAvg,
xmin = forceAvg - forceSE,
xmax= forceAvg + forceSE,
color = conditions2))+
xlab("Force (pN)")+
ylab("*k<sub>pi+</sub>* (s<sup>-1</sup>)")+
ggtitle("Load Dependence of *k<sub>pi+</sub>*")+
coord_cartesian(xlim = c(0, NA), ylim = c(0, NA))+
scale_color_manual(values = c(plot_colors[2:4], plot_colors[6:8]), guide = "none")+
scale_fill_manual(values = plot_colors, guide = "none")+
scale_shape_manual(values = c(15, 16), name = "")+
# facet_grid(~myo)+
theme_cowplot(12)+
theme(
strip.background = element_rect(fill = "transparent"),
strip.text = element_text(face = "bold"),
plot.title = element_markdown(size = 10, hjust = 0.5),
axis.title.y = element_markdown()
)
)
par1 <- broom::tidy(fit)
par1$myo <- "WT"
par2 <- broom::tidy(fit2)
par2$myo <- "S217A"
parAll <- rbind(par1, par2)
parAll$myo <- factor(parAll$myo, levels = c("WT", "S217A"))
parAll$term2 <- ifelse(parAll$term == "k0", "*k<sub>0</sub>* (s<sup>-1</sup>)", "*d* (nm)")
parAll$term2 <- factor(parAll$term2, levels = c("*k<sub>0</sub>* (s<sup>-1</sup>)", "*d* (nm)"))
(ggParAll <-
ggplot(data=parAll)+
geom_col(aes(x = myo, y = estimate, fill = myo), position = "dodge")+
geom_errorbar(aes(x = myo,
ymax=estimate+std.error,
ymin=estimate-std.error,
color = myo),
position="dodge",
width = 0.25)+
facet_wrap(~term2,
strip.position = "left",
scales = "free")+
ggtitle("Fit Parameters")+
xlab("")+
ylab("")+
scale_fill_manual(values = c(blues[[7]], reds[[7]]))+
scale_color_manual(values = c(blues[[7]], reds[[7]]))+
scale_y_continuous(expand = expansion(c(0, 0.1)))+
theme_cowplot(12)+
theme(
plot.title = element_text(hjust = 0.5, size = 10),
axis.text.x = element_markdown(size = 6),
axis.text.y = element_markdown(size = 10),
axis.title.y = element_markdown(),
legend.position = "none",
strip.text = element_markdown(),
strip.text.y.left = element_markdown(),
strip.background = element_blank(),
strip.placement = "outside"
)
)
fig4top <- plot_grid(ggLoad, ggParAll, nrow = 1, rel_widths = c(0.65, 0.35))
fig4top
plot_grid(fig4_top, ggdelta_g)
ggdelta_g  <- ggdraw()+draw_image(delta_g)
plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4_top, ggdelta_g)
fig4top <- plot_grid(ggLoad, ggParAll, nrow = 1, rel_widths = c(0.65, 0.35))
delta_g  <- image_read("traces/Figure 4C.pptx.png")
ggdelta_g  <- ggdraw()+draw_image(delta_g)
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4_top, ggdelta_g)
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4top, ggdelta_g)
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4top, ggdelta_g, nrow = 2)
fig4top <- plot_grid(ggLoad, ggParAll, nrow = 1, rel_widths = c(0.65, 0.35), labels = c("a", "b"))
delta_g  <- image_read("traces/Figure 4C.pptx.png")
ggdelta_g  <- ggdraw()+draw_image(delta_g)
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4top, ggdelta_g, nrow = 2)
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4top, ggdelta_g, nrow = 2, labels = c("", "c"))
ggsave("figs/fig4-load-dependence-rates.jpg", bg="white")
#plot_grid(ggLoad, ggParAll, ggdelta_g, ncol = 1, rel_heights = c(0.5, 0.2, 0.4))
plot_grid(fig4top, ggdelta_g, nrow = 2, labels = c("", "c"), rel_heights = c(0.4, 0.6))
ggsave("figs/fig4-load-dependence-rates.jpg", bg="white")
library(data.table)
library(ggplot2)
library(cowplot)
library(RColorBrewer)
library(magick)
library(ggridges)
library(ggtext)
library(svg)
library(drc)
library(readxl)
library(randomcoloR)
library(dplyr)
# read in data
myoV <- fread("data/MyoV_Pi_Rebind_Events4.csv")
# rename conditions for consistent style/format
# MYOSIN_PI_POWER
myoV$conditions2 <- ifelse(myoV$conditions == "S217A", "S217A_0mM-Pi_1.5-W",
ifelse(myoV$conditions == "S217A 30mM Pi","S217A_30mM-Pi_1.5-W",
ifelse(myoV$conditions == "S217A 30mM Pi 2W", "S217A_30mM-Pi_2-W",
ifelse(myoV$conditions == "S217A 30mM Pi_3W", "S217A_30mM-Pi_3-W",
ifelse(myoV$conditions == "WT", "WT_0mM-Pi_1.5-W",
ifelse(myoV$conditions == "WT 30mM Pi", "WT_30mM-Pi_1.5-W",
ifelse(myoV$conditions == "WT 30mM Pi 2W", "WT_30mM-Pi_2-W",
ifelse(myoV$conditions == "WT 30mM Pi_3W", "WT_30mM-Pi_3-W", "un-labeled"
)
)
)
)
)
)
)
)
myoV$conditions2 <- factor(myoV$conditions2, levels = c("WT_0mM-Pi_1.5-W",
"WT_30mM-Pi_1.5-W",
"WT_30mM-Pi_2-W",
"WT_30mM-Pi_3-W",
"S217A_0mM-Pi_1.5-W",
"S217A_30mM-Pi_1.5-W",
"S217A_30mM-Pi_2-W",
"S217A_30mM-Pi_3-W"))
# define a helper function
splitConditions <- function(x, n){
strsplit(x, split = "_", fixed = TRUE)[[1]][[n]]
}
# add new columns
myoV$myo <- sub("_.*", "", myoV$conditions2)
myoV$prettyConditions <- gsub("_", " ", myoV$conditions2)
myoV$prettyConditions <- factor(myoV$prettyConditions, levels = gsub("_", " ", c("WT_0mM-Pi_1.5-W",
"WT_30mM-Pi_1.5-W",
"WT_30mM-Pi_2-W",
"WT_30mM-Pi_3-W",
"S217A_0mM-Pi_1.5-W",
"S217A_30mM-Pi_1.5-W",
"S217A_30mM-Pi_2-W",
"S217A_30mM-Pi_3-W")))
myoV$myo <- factor(myoV$myo, levels = c("WT", "S217A"))
myoV$pi  <- sapply(as.character(myoV$conditions2), splitConditions, n = 2)
myoV$power <- sapply(as.character(myoV$conditions2), splitConditions, n = 3)
myoV$piPower <- paste0(myoV$pi, "_", myoV$power)
myoV$power2  <- sub("-.*", "", myoV$power)
myoV$velocity  <- myoV$displacement_nm / myoV$time_on_ms
myoV$pn_nm <- ifelse(myoV$power2 == 1.5, "0.04 \n pN/nm",
ifelse(myoV$power2 == 2, "0.06 \n  pN/nm",
ifelse(myoV$power2 == 3, "0.1 \n pN/nm", NA)))
myoV$pn_nm2 <- ifelse(myoV$power2 == 1.5, 0.04,
ifelse(myoV$power2 == 2, 0.06,
ifelse(myoV$power2 == 3, 0.1, NA)))
myoV$pn_nm3 <- ifelse(myoV$power2 == 1.5, "0.04 pN/nm",
ifelse(myoV$power2 == 2, "0.06 pN/nm",
ifelse(myoV$power2 == 3, "0.1 pN/nm", NA)))
myoV$force <- myoV$displacement_nm*myoV$pn_nm2
# myoV$force_conversion <-  myoV$force/myoV$displacement_nm
# hm <- myoV[, .(conditions, date, obs, displacement_nm, force, force_conversion)]
# summarize data {data.table} style
# this does the same as group_by()%>%summarize()
dataSummary <- myoV[,
.(displacementAvg = mean(displacement_nm),
displacementSD = sd(displacement_nm),
displacementSE = (sd(displacement_nm)/sqrt(.N)),
forceAvg = mean(force),
forceSE = (sd(force)/sqrt(.N)),
forceSD = sd(force),
timeOnAvg = mean(time_on_ms),
timeOnSD = sd(time_on_ms),
timeOnSE = (sd(time_on_ms)/sqrt(.N)),
rateAvg =  ( 1 / mean(time_on_ms) ) * 1000,
rateSE = (( 1 / sd(time_on_ms )) * 1000) / sqrt(.N),
timeOffAvg = mean(time_off_ms, na.rm = TRUE),
timeOffSD = sd(time_off_ms, na.rm = TRUE),
trapStiffnessAvg = mean(trap_stiffness, na.rm = TRUE),
velocityAvg = mean(velocity, na.rm = TRUE),
velocitySE = (sd(velocity)/sqrt(.N))),
by = list(conditions2, myo, pi, power, power2, piPower, pn_nm, pn_nm2, pn_nm3, prettyConditions)]
# get some pretty colors
reds  <- RColorBrewer::brewer.pal(9, "Reds")
blues  <- RColorBrewer::brewer.pal(9, "Blues")
plot_colors <- c(blues[[4]], blues[[5]], blues[[7]], blues[[9]],
reds[[4]], reds[[5]], reds[[7]], reds[[9]])
plot_colors2 <- c(blues[[5]], blues[[5]], blues[[7]], blues[[9]],
reds[[5]], reds[[5]], reds[[7]], reds[[9]])
plot_colors3 <- c("grey40", blues[[5]], blues[[7]], blues[[9]],
"grey40", reds[[5]], reds[[7]], reds[[9]])
plot_colors4 <- c( blues[[5]], blues[[7]], blues[[9]],
blues[[5]], blues[[5]], blues[[7]], blues[[9]],
reds[[5]], reds[[5]], reds[[7]], reds[[9]]
)
load_dep_data <- dataSummary[pi == "30mM-Pi" & myo == "WT", .(myo, pi, power, forceAvg, rateAvg)]
wt0 <- data.frame(myo="WT",
pi="0mM-Pi",
power=1.5,
forceAvg=0)
kT <-  4.10
fit <- nls(rateAvg ~ k0*exp((forceAvg*d) / 4.10 ), data = load_dep_data, start = list(k0=1, d=4))
predict_fit <- data.frame(y = predict(fit, newdata=data.frame(forceAvg=seq(0, 4.1, by = 0.01))),
x = seq(0, 4.1, by=0.01))
load_dep_data2 <- dataSummary[pi == "30mM-Pi" & myo == "S217A"]
fit2 <- nls(rateAvg ~ k0*exp((forceAvg*d) / 4.10 ), data = load_dep_data2, start = list(k0=1, d=4))
predict_fit2 <- data.frame(y = predict(fit2, newdata=data.frame(forceAvg=seq(0, 2.5, by = 0.01))),
x = seq(0, 2.5, by=0.01))
(ggLoad <-
ggplot(data = dataSummary[pi == "30mM-Pi"], aes(x = forceAvg)) +
geom_line(data=predict_fit, aes(x = x, y = y), color = blues[[9]], size = 0.7)+
geom_line(data=predict_fit2, aes(x = x, y = y), color = reds[[9]],  size = 0.7)+
geom_point(aes(y = rateAvg,
color = conditions2),
size = 1.5)+
geom_errorbar(aes(ymin = rateAvg - rateSE,
ymax = rateAvg + rateSE,
color = conditions2))+
geom_errorbarh(aes(y = rateAvg,
xmin = forceAvg - forceSE,
xmax= forceAvg + forceSE,
color = conditions2))+
xlab("Force (pN)")+
ylab("*k<sub>pi+</sub>* (s<sup>-1</sup>)")+
ggtitle("Load Dependence of *k<sub>pi+</sub>*")+
coord_cartesian(xlim = c(0, NA), ylim = c(0, NA))+
scale_color_manual(values = c(plot_colors[2:4], plot_colors[6:8]), guide = "none")+
scale_fill_manual(values = plot_colors, guide = "none")+
scale_shape_manual(values = c(15, 16), name = "")+
# facet_grid(~myo)+
theme_cowplot(12)+
theme(
strip.background = element_rect(fill = "transparent"),
strip.text = element_text(face = "bold"),
plot.title = element_markdown(size = 10, hjust = 0.5),
axis.title.y = element_markdown()
)
)
par1 <- broom::tidy(fit)
par1$myo <- "WT"
par2 <- broom::tidy(fit2)
par2$myo <- "S217A"
parAll <- rbind(par1, par2)
parAll$myo <- factor(parAll$myo, levels = c("WT", "S217A"))
parAll$term2 <- ifelse(parAll$term == "k0", "*k<sub>0</sub>* (s<sup>-1</sup>)", "*d* (nm)")
parAll$term2 <- factor(parAll$term2, levels = c("*k<sub>0</sub>* (s<sup>-1</sup>)", "*d* (nm)"))
(ggParAll <-
ggplot(data=parAll)+
geom_col(aes(x = myo, y = estimate, fill = myo), position = "dodge")+
geom_errorbar(aes(x = myo,
ymax=estimate+std.error,
ymin=estimate-std.error,
color = myo),
position="dodge",
width = 0.25)+
facet_wrap(~term2,
strip.position = "left",
scales = "free")+
ggtitle("Fit Parameters")+
xlab("")+
ylab("")+
scale_fill_manual(values = c(blues[[7]], reds[[7]]))+
scale_color_manual(values = c(blues[[7]], reds[[7]]))+
scale_y_continuous(expand = expansion(c(0, 0.1)))+
theme_cowplot(12)+
theme(
plot.title = element_text(hjust = 0.5, size = 10),
axis.text.x = element_markdown(size = 6),
axis.text.y = element_markdown(size = 10),
axis.title.y = element_markdown(),
legend.position = "none",
strip.text = element_markdown(),
strip.text.y.left = element_markdown(),
strip.background = element_blank(),
strip.placement = "outside"
)
)
sink("figs/load-dep-rates.txt")
summary(fit)
summary(fit2)
sink()
