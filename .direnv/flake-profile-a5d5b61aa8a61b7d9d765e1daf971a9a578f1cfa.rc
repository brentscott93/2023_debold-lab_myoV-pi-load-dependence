unset shellHook
nix_saved_PATH="$PATH"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
EPOCHREALTIME='1672250409.831130'
EPOCHSECONDS='1672250409'
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/5w041v70vl833g9054f4m3rf3g9vwrbk-R-4.2.2/bin:/nix/store/h8gvq6r4hgpa71h44dmg9qfx03mj81sv-coreutils-9.1/bin:/nix/store/zml88vnkpm8if114qkbbqd1q7n3ypqqy-findutils-4.9.0/bin:/nix/store/49y3r0gr9m6k20d91kl6dgp4b9a6m72v-diffutils-3.8/bin:/nix/store/5dv5cq1lwvsijr9p16p2kp79g1dbajk3-gnused-4.8/bin:/nix/store/bcvccw6y9bfil6xrl5j7psza7hnd16ry-gnugrep-3.7/bin:/nix/store/l1fp0hyca54xbb85vfhppd16bskzx8dg-gawk-5.1.1/bin:/nix/store/89zbjdkb48ma61k76l2mzn3s0ra0wn2c-gnutar-1.34/bin:/nix/store/qs8qb1swpivkfq7i9yd52n0mw6z4ij81-gzip-1.12/bin:/nix/store/wwkyfg8b34xy16zzc9p6rkh59p4q37qx-bzip2-1.0.8-bin/bin:/nix/store/i0x4pzj96qwvkrm94317l6jbi53a2rdj-gnumake-4.4/bin:/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin:/nix/store/793iwfbjvg7wgpqq7r83a1qjl1yg02sf-patch-2.7.6/bin:/nix/store/a3mwv26f99ycsv9w6hrx0jjjjywvcb1n-xz-5.2.9-bin/bin:/nix/store/camlh5laf1wsklghk0vcaw7gvx4rpzd1-file-5.43/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LINENO='73'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/62fb427ncxaaksa2k59rhbilfg68v20x-binutils-wrapper-2.39'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='12'
export NIX_BUILD_CORES
NIX_CC='/nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=gddhlbzf3a -isystem /nix/store/8a6jiwqz2242z1d7mnq3mwd5z5iv6lim-bash-interactive-5.1-p16-dev/include -isystem /nix/store/8a6jiwqz2242z1d7mnq3mwd5z5iv6lim-bash-interactive-5.1-p16-dev/include'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='fortify stackprotector pic strictoverflow format relro bindnow'
export NIX_HARDENING_ENABLE
NIX_INDENT_MAKE='1'
export NIX_INDENT_MAKE
NIX_LDFLAGS='-rpath /home/brent/umass/myoV-pi-rebinding/outputs/out/lib64 -rpath /home/brent/umass/myoV-pi-rebinding/outputs/out/lib '
export NIX_LDFLAGS
NIX_LIB64_IN_SELF_RPATH='1'
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/x40p83k9mk03kklpfahqppp6kz85yx99-bash-interactive-5.1-p16/bin:/nix/store/g2nfbpind37b3v3y6zbszmcgfmrj5v7x-patchelf-0.15.0/bin:/nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0/bin:/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0/bin:/nix/store/s7ip867mrpnnjlppbnxlcsq10gv13x2x-glibc-2.35-224-bin/bin:/nix/store/h8gvq6r4hgpa71h44dmg9qfx03mj81sv-coreutils-9.1/bin:/nix/store/62fb427ncxaaksa2k59rhbilfg68v20x-binutils-wrapper-2.39/bin:/nix/store/frh9l9nrdysasdi2gs7i241s241ngjw2-binutils-2.39/bin:/nix/store/5w041v70vl833g9054f4m3rf3g9vwrbk-R-4.2.2/bin:/nix/store/h8gvq6r4hgpa71h44dmg9qfx03mj81sv-coreutils-9.1/bin:/nix/store/zml88vnkpm8if114qkbbqd1q7n3ypqqy-findutils-4.9.0/bin:/nix/store/49y3r0gr9m6k20d91kl6dgp4b9a6m72v-diffutils-3.8/bin:/nix/store/5dv5cq1lwvsijr9p16p2kp79g1dbajk3-gnused-4.8/bin:/nix/store/bcvccw6y9bfil6xrl5j7psza7hnd16ry-gnugrep-3.7/bin:/nix/store/l1fp0hyca54xbb85vfhppd16bskzx8dg-gawk-5.1.1/bin:/nix/store/89zbjdkb48ma61k76l2mzn3s0ra0wn2c-gnutar-1.34/bin:/nix/store/qs8qb1swpivkfq7i9yd52n0mw6z4ij81-gzip-1.12/bin:/nix/store/wwkyfg8b34xy16zzc9p6rkh59p4q37qx-bzip2-1.0.8-bin/bin:/nix/store/i0x4pzj96qwvkrm94317l6jbi53a2rdj-gnumake-4.4/bin:/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin:/nix/store/793iwfbjvg7wgpqq7r83a1qjl1yg02sf-patch-2.7.6/bin:/nix/store/a3mwv26f99ycsv9w6hrx0jjjjywvcb1n-xz-5.2.9-bin/bin:/nix/store/camlh5laf1wsklghk0vcaw7gvx4rpzd1-file-5.43/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
R_LIBS_SITE='/nix/store/prcvs8gdbrnf69lr2q0rdh5zfih3z4qk-r-data.table-1.14.6/library:/nix/store/ywmz230hnyr59j4qc6sx4q4cwn18k4zl-r-ggplot2-3.4.0/library:/nix/store/n31d9592kgrsk6c6sak27gigg1lqwrzp-r-cli-3.4.1/library:/nix/store/di5f6846s7b7jjswaw9jbgyzi8x0cyxk-r-glue-1.6.2/library:/nix/store/4vw5yi5k4rs3fsysw0lxyxgwn3fzr2ky-r-gtable-0.3.1/library:/nix/store/riqf5plmnr93nbhpkhx2y283syg59cca-r-isoband-0.2.6/library:/nix/store/8xi52xycy837d84iamqb9f2p8n9hr63g-r-lifecycle-1.0.3/library:/nix/store/hcjnw53bw0njmnb12cfj4xfcmxb9ql84-r-rlang-1.0.6/library:/nix/store/l0mg473c7nyrmay7098ajgk32ad6yxlg-r-MASS-7.3-58.1/library:/nix/store/zn6xmaqhpfjzkg515r9lxwvq64304fxp-r-mgcv-1.8-41/library:/nix/store/axiklcvkr0qndc2865a10jw4kqwgsply-r-Matrix-1.5-3/library:/nix/store/59vqllms3vhynz5rdr8bsn17yhryplpv-r-lattice-0.20-45/library:/nix/store/wcb1816bj0lxc9sf7bn5bcz7xz2lpllh-r-nlme-3.1-160/library:/nix/store/f48qjaq8kgyp0cnbp7q3hjjkfr5ixmgx-r-scales-1.2.1/library:/nix/store/abqapakqbfsrfcapjng0kz2rn7ngy46c-r-farver-2.1.1/library:/nix/store/9zjfgma6160065k4gj4b9j9sv1k5g7xv-r-labeling-0.4.2/library:/nix/store/rwk30rk5gnqgcv13z986q3w90z1rsq4w-r-munsell-0.5.0/library:/nix/store/llna067s123cwm76xrp2a0a578xc9lnn-r-colorspace-2.0-3/library:/nix/store/d6d3x7ng4vq3psbljs4p4i0zp2pn60ih-r-R6-2.5.1/library:/nix/store/8ff48zlvvrd3q9njyb3nhny3nnbm9jls-r-RColorBrewer-1.1-3/library:/nix/store/imdhh4fdnzg458a125lciv4blbw4rsvr-r-viridisLite-0.4.1/library:/nix/store/az8dmd42nnkn4lv10vp2nsyfmwfpa8lz-r-tibble-3.1.8/library:/nix/store/y8mi36iazwdr90ag6snzqq53vvy1dgin-r-fansi-1.0.3/library:/nix/store/yvalibbgiybrycwfdvrz54bd6in08c2y-r-magrittr-2.0.3/library:/nix/store/xkc69gksy2a3lw8dqflsw5w7ragrqfhn-r-pillar-1.8.1/library:/nix/store/wizbsplgnzfwyhvdzjqnxgqard74y9cz-r-utf8-1.2.2/library:/nix/store/8j3rzc7vv3m7cl7gvky5prl9k8nlr28h-r-vctrs-0.5.1/library:/nix/store/q20bbv22x2yg6crz9gxy5brcvbl8b2nq-r-pkgconfig-2.0.3/library:/nix/store/i1l55ilv5zikarzmn70c2b5qcvmm98wp-r-withr-2.5.0/library:/nix/store/7c9kv9lqv8g82ki50xp5mwbx6bq4y8ca-r-cowplot-1.1.1/library:/nix/store/imqpqfji7az33r0lgjnj7y58klddhrbj-r-magick-2.7.3/library:/nix/store/9jj0h10qjzlsqm6pl8kfqk7sdqav6j6a-r-curl-4.3.3/library:/nix/store/6cgmqwsada0mknjysclnc7anwm0c2yzv-r-Rcpp-1.0.9/library:/nix/store/yn7zk5z6yqvm2m2lmn873w2mbigqs35d-r-ggtext-0.1.2/library:/nix/store/pk6fydsrcdnv1h00c9a400jn6j5w1vyy-r-gridtext-0.1.5/library:/nix/store/3yfrf326gaw5vbk32cvkcdgplsrk7j4i-r-jpeg-0.1-10/library:/nix/store/gpgh2qssi8lyprp7480pwnkc4h29zqja-r-markdown-1.4/library:/nix/store/84svs3x2a8z52vp34yykj9ivz0mjw2wh-r-commonmark-1.8.1/library:/nix/store/sqgscvx5apxxfzs5j0klbw5mk89qpm5w-r-mime-0.12/library:/nix/store/4yfhypp4g3v36ncy7s07l0x4s12zz4a9-r-xfun-0.35/library:/nix/store/9yd8089sqvn7cwhnx1zvliyqiih3bd2a-r-png-0.1-8/library:/nix/store/46a7lgw1gkdaa127mzmvhm7bmx3ha0jp-r-stringr-1.5.0/library:/nix/store/82w2gpgp5vy5xrv1bc8485vxjpw3anqx-r-stringi-1.7.8/library:/nix/store/00qhwfqa1b1dscd8fm10cr20xmnnaw7r-r-xml2-1.3.3/library:/nix/store/sabyfarng7zndi9ss6mfm252471ybwgp-r-drc-3.0-1/library:/nix/store/6q04bhq53cx79mwmb9vpbmrlzm16ykk2-r-car-3.1-1/library:/nix/store/23nqly4lv8kkph83yj59p2r4b11642pv-r-abind-1.4-5/library:/nix/store/y4i92320jv0yc7annxg4mv6fxj80m9bx-r-carData-3.0-5/library:/nix/store/jlzni1x48kmfkvpfvay9m13g2sw38qwh-r-lme4-1.1-31/library:/nix/store/qv3yzd155p392ah93db2zxjylwrmv66b-r-boot-1.3-28.1/library:/nix/store/bazlblxh9dgqaz6hraw7jizcvih986kx-r-minqa-1.2.5/library:/nix/store/30hl5dmpc4nqbk2mwn0f8y84q74j3rk7-r-nloptr-2.0.3/library:/nix/store/xzf1j1q2lxhw9r6lm5g75n3ynvk4xsws-r-testthat-3.1.6/library:/nix/store/shyrp6aackny02w3plli68qy573l8qk7-r-brio-1.1.3/library:/nix/store/9aawb8kpkxldhq69qp2lr61s3nvvcri4-r-callr-3.7.3/library:/nix/store/ilgm414r0pbp7ff3nmhivi0fhm7zib19-r-processx-3.8.0/library:/nix/store/xglkh2zncpm05izyhs4r9n72hwgibfsc-r-ps-1.7.2/library:/nix/store/zcqap23rf2nfq1zd6dqcpmp7mji29771-r-desc-1.4.2/library:/nix/store/27gzs6fsjprcy0i0hy361a81kmk6ihkq-r-rprojroot-2.0.3/library:/nix/store/d6p17yrw5c721mipdnjk1habi5y2h1vy-r-digest-0.6.31/library:/nix/store/jb5hsbq10zjbkx4f4xszw2z494mlmqwb-r-ellipsis-0.3.2/library:/nix/store/8fxrdlzqa23qvnj66b9jsc0kp0vw3hi5-r-evaluate-0.18/library:/nix/store/rkfykrq8dnd8bg7l3d3q25dfybmvklh8-r-jsonlite-1.8.4/library:/nix/store/9p8sq9mwkaipa2ad2b1ix8gmf8ky098q-r-pkgload-1.3.2/library:/nix/store/2f501p1clixjjfhd7i5ycg0957g2g3x8-r-crayon-1.5.2/library:/nix/store/j3v01sd5895439xsh5g7nj6k6p10q7j4-r-fs-1.5.2/library:/nix/store/zy8q36xw4y38r620li34bh4nmxcqyw11-r-praise-1.0.0/library:/nix/store/w18lxalmh1l07766qing21vcplx4jaj8-r-waldo-0.4.0/library:/nix/store/c8n6z5jvapw56hb0yx2snlx771rbq8rs-r-diffobj-0.3.5/library:/nix/store/igdqk78q477201hxi9h6bfb7syajnvsn-r-rematch2-2.1.2/library:/nix/store/q662rkwzmjzhbfmmpz62i13qja0xijws-r-RcppEigen-0.3.3.9.3/library:/nix/store/4xbl6wd4bpqycwg5ym5qi4hk2pgxgqrd-r-nnet-7.3-18/library:/nix/store/zymqh81lhmq45jdqwxj13f1cgy5akl27-r-pbkrtest-0.5.1/library:/nix/store/071cdjs112y4ykwgd0jicn3jz9r7n3kh-r-broom-1.0.1/library:/nix/store/z984jrcvcjj4lcs0f9skjvjfgj3fzmg9-r-backports-1.4.1/library:/nix/store/m5jvrsg4ia90wlrzls7sjf05sjj48ykf-r-dplyr-1.0.10/library:/nix/store/f3qc768y558ymhnsm572l19jbr10mpbj-r-generics-0.1.3/library:/nix/store/gy0z7l9qj7k15g3yj301rbz99qy17slh-r-tidyselect-1.2.0/library:/nix/store/i0hi6b9yk9bggkb9bmi7cr00s02nlzsr-r-purrr-0.3.5/library:/nix/store/dwwpqc6i75nw20jnfkfa52fl9d1c920l-r-tidyr-1.2.1/library:/nix/store/96snbajzdardb2c82nqlbrcbqgmlnf18-r-cpp11-0.4.3/library:/nix/store/jwq05wpp173yqmiirff3qrgafvqw7vm5-r-knitr-1.41/library:/nix/store/m20bldgjxwvh9c8nf1gl1hvkpfncm9gm-r-highr-0.9/library:/nix/store/wfqqsw6vqrajwjd9zp3d3bgqsx4xl678-r-yaml-2.3.6/library:/nix/store/aqq3j0s2zfc7imqnv237pkwkwd6wwn0f-r-numDeriv-2016.8-1.1/library:/nix/store/0m27zc39gijd82ymrg0sx5lql2qgx886-r-quantreg-5.94/library:/nix/store/6rqxmp6cmdgdw4djmwkiyd4n91j03yk4-r-MatrixModels-0.5-1/library:/nix/store/h0kaz4xq2303ihsmsdnl193qmj99icj9-r-SparseM-1.81/library:/nix/store/b9czrg5jm0rvbx0x5lijbsmbna3xyziv-r-survival-3.4-0/library:/nix/store/gliwbplcpngpq83cy2cwqqmrv9vc577q-r-gtools-3.9.4/library:/nix/store/xfhwq2wxik8pkkkxrdjswnv0j9ci16hi-r-multcomp-1.4-20/library:/nix/store/cp81v7ay844k9d3iyflrj7w5wgx1xx06-r-codetools-0.2-18/library:/nix/store/3mb1z3p6pi7jy7ara4mkn1qnnrlanpam-r-mvtnorm-1.1-3/library:/nix/store/rknym2w2qqqxxrb4pg8lwjh7y72akynz-r-sandwich-3.0-2/library:/nix/store/in87qaqj5q358xa517m36jm1n0yg666m-r-zoo-1.8-11/library:/nix/store/82z2xihsm51a5xn5vqy9lcf9vbvhbhz6-r-TH.data-1.1-1/library:/nix/store/kr1yz878dp4x2qffm802lwqdlbis8wa7-r-plotrix-3.8-2/library:/nix/store/hrgh8yrbanafm4mg7y1g33ibbp2ygfg9-r-ggpubr-0.5.0/library:/nix/store/dg1k8j38c4nmm6b096a2i5lhqy5kazz5-r-ggrepel-0.9.2/library:/nix/store/sj1vjwcxx4z5qxd0m7a9p8s247r54p5s-r-ggsci-2.9/library:/nix/store/5lfhpjkwj53n084nlmvwr3xsah1k0mc4-r-ggsignif-0.6.4/library:/nix/store/mj289p35nk2f6zx5vq46gaypyh3xgw0v-r-gridExtra-2.3/library:/nix/store/szwwyncj3mqddfbjl32dlaa4dzkj0ysd-r-polynom-1.4-1/library:/nix/store/fplyhcxccqv24hvzwm4sx5drwl3qf20x-r-rstatix-0.7.1/library:/nix/store/fk698p9cisf4r466v32ws1n5k0c8wqla-r-corrplot-0.92/library:/nix/store/r3nzip933vvr2h2dp86zspz7jb0sg34i-r-readxl-1.4.1/library:/nix/store/y2gn1xiv0hrf92d11jil9igakn8y3dql-r-cellranger-1.1.0/library:/nix/store/qczq1zclpjnl5fg0m7ckq7wygxmkni3y-r-rematch-1.0.1/library:/nix/store/b6sphzxqgy5has0b4ihjp96bzki0xnmq-r-progress-1.2.2/library:/nix/store/wblchxcdk6mjvpkqkkb6p2ljnhphb7b8-r-hms-1.1.2/library:/nix/store/d6irs5fhjkbscm73363m8ijdqz0lvcqs-r-prettyunits-1.1.1/library:/nix/store/ziqwvmxm3h9f3si4ing0fv9caq12662a-r-randomcoloR-1.1.0.1/library:/nix/store/k0nq1xwi5mxpvnpv0ac23aazbnlalrfn-r-cluster-2.1.4/library:/nix/store/d4ajwfgw4b3pvcjj38439y8yl7jyw8j9-r-Rtsne-0.16/library:/nix/store/mv3by5v3yi3n7zacs8ss67j8fw2f6kgy-r-V8-4.2.2/library'
export R_LIBS_SITE
SHELL='/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash'
export SHELL
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/x40p83k9mk03kklpfahqppp6kz85yx99-bash-interactive-5.1-p16/share:/nix/store/g2nfbpind37b3v3y6zbszmcgfmrj5v7x-patchelf-0.15.0/share'
export XDG_DATA_DIRS
buildInputs='/nix/store/5w041v70vl833g9054f4m3rf3g9vwrbk-R-4.2.2 /nix/store/prcvs8gdbrnf69lr2q0rdh5zfih3z4qk-r-data.table-1.14.6 /nix/store/ywmz230hnyr59j4qc6sx4q4cwn18k4zl-r-ggplot2-3.4.0 /nix/store/7c9kv9lqv8g82ki50xp5mwbx6bq4y8ca-r-cowplot-1.1.1 /nix/store/8ff48zlvvrd3q9njyb3nhny3nnbm9jls-r-RColorBrewer-1.1-3 /nix/store/imqpqfji7az33r0lgjnj7y58klddhrbj-r-magick-2.7.3 /nix/store/yn7zk5z6yqvm2m2lmn873w2mbigqs35d-r-ggtext-0.1.2 /nix/store/sabyfarng7zndi9ss6mfm252471ybwgp-r-drc-3.0-1 /nix/store/hrgh8yrbanafm4mg7y1g33ibbp2ygfg9-r-ggpubr-0.5.0 /nix/store/r3nzip933vvr2h2dp86zspz7jb0sg34i-r-readxl-1.4.1 /nix/store/ziqwvmxm3h9f3si4ing0fv9caq12662a-r-randomcoloR-1.1.0.1 /nix/store/m5jvrsg4ia90wlrzls7sjf05sjj48ykf-r-dplyr-1.0.10'
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/g2nfbpind37b3v3y6zbszmcgfmrj5v7x-patchelf-0.15.0 /nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh /nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relative.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/g8xg0i02aqwhgxwd2vnp5ax3d6lrkg1v-strip.sh /nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/8zxndz5ag0p6s526c2xyllhk1nrn4c3i-audit-tmpdir.sh /nix/store/c8n9kcdddp9np665xz6ri61b383nxvz8-move-systemd-user-units.sh /nix/store/w3bj8ahrbp24bspah8ggxmf5f5m0b45i-multiple-outputs.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds.sh /nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=('addRLibPath' )
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' '_makeSymlinksRelative' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_doStrip' 'patchShebangsAuto' '_pruneLibtoolFiles' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' '_moveSystemdUserUnits' '_moveSbin' '_moveLib64' )
guess='12'
initialPath='/nix/store/h8gvq6r4hgpa71h44dmg9qfx03mj81sv-coreutils-9.1 /nix/store/zml88vnkpm8if114qkbbqd1q7n3ypqqy-findutils-4.9.0 /nix/store/49y3r0gr9m6k20d91kl6dgp4b9a6m72v-diffutils-3.8 /nix/store/5dv5cq1lwvsijr9p16p2kp79g1dbajk3-gnused-4.8 /nix/store/bcvccw6y9bfil6xrl5j7psza7hnd16ry-gnugrep-3.7 /nix/store/l1fp0hyca54xbb85vfhppd16bskzx8dg-gawk-5.1.1 /nix/store/89zbjdkb48ma61k76l2mzn3s0ra0wn2c-gnutar-1.34 /nix/store/qs8qb1swpivkfq7i9yd52n0mw6z4ij81-gzip-1.12 /nix/store/wwkyfg8b34xy16zzc9p6rkh59p4q37qx-bzip2-1.0.8-bin /nix/store/i0x4pzj96qwvkrm94317l6jbi53a2rdj-gnumake-4.4 /nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16 /nix/store/793iwfbjvg7wgpqq7r83a1qjl1yg02sf-patch-2.7.6 /nix/store/a3mwv26f99ycsv9w6hrx0jjjjywvcb1n-xz-5.2.9-bin /nix/store/camlh5laf1wsklghk0vcaw7gvx4rpzd1-file-5.43'
mesonFlags=''
export mesonFlags
name='nix-shell'
export name
nativeBuildInputs='/nix/store/8a6jiwqz2242z1d7mnq3mwd5z5iv6lim-bash-interactive-5.1-p16-dev'
export nativeBuildInputs
out='/home/brent/umass/myoV-pi-rebinding/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/8a6jiwqz2242z1d7mnq3mwd5z5iv6lim-bash-interactive-5.1-p16-dev' '/nix/store/x40p83k9mk03kklpfahqppp6kz85yx99-bash-interactive-5.1-p16' '/nix/store/g2nfbpind37b3v3y6zbszmcgfmrj5v7x-patchelf-0.15.0' '/nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh' '/nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relative.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/g8xg0i02aqwhgxwd2vnp5ax3d6lrkg1v-strip.sh' '/nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/8zxndz5ag0p6s526c2xyllhk1nrn4c3i-audit-tmpdir.sh' '/nix/store/c8n9kcdddp9np665xz6ri61b383nxvz8-move-systemd-user-units.sh' '/nix/store/w3bj8ahrbp24bspah8ggxmf5f5m0b45i-multiple-outputs.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds.sh' '/nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0' '/nix/store/62fb427ncxaaksa2k59rhbilfg68v20x-binutils-wrapper-2.39' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=()
declare -a pkgsHostTarget=('/nix/store/5w041v70vl833g9054f4m3rf3g9vwrbk-R-4.2.2' '/nix/store/prcvs8gdbrnf69lr2q0rdh5zfih3z4qk-r-data.table-1.14.6' '/nix/store/ywmz230hnyr59j4qc6sx4q4cwn18k4zl-r-ggplot2-3.4.0' '/nix/store/n31d9592kgrsk6c6sak27gigg1lqwrzp-r-cli-3.4.1' '/nix/store/di5f6846s7b7jjswaw9jbgyzi8x0cyxk-r-glue-1.6.2' '/nix/store/4vw5yi5k4rs3fsysw0lxyxgwn3fzr2ky-r-gtable-0.3.1' '/nix/store/riqf5plmnr93nbhpkhx2y283syg59cca-r-isoband-0.2.6' '/nix/store/8xi52xycy837d84iamqb9f2p8n9hr63g-r-lifecycle-1.0.3' '/nix/store/hcjnw53bw0njmnb12cfj4xfcmxb9ql84-r-rlang-1.0.6' '/nix/store/l0mg473c7nyrmay7098ajgk32ad6yxlg-r-MASS-7.3-58.1' '/nix/store/zn6xmaqhpfjzkg515r9lxwvq64304fxp-r-mgcv-1.8-41' '/nix/store/axiklcvkr0qndc2865a10jw4kqwgsply-r-Matrix-1.5-3' '/nix/store/59vqllms3vhynz5rdr8bsn17yhryplpv-r-lattice-0.20-45' '/nix/store/wcb1816bj0lxc9sf7bn5bcz7xz2lpllh-r-nlme-3.1-160' '/nix/store/f48qjaq8kgyp0cnbp7q3hjjkfr5ixmgx-r-scales-1.2.1' '/nix/store/abqapakqbfsrfcapjng0kz2rn7ngy46c-r-farver-2.1.1' '/nix/store/9zjfgma6160065k4gj4b9j9sv1k5g7xv-r-labeling-0.4.2' '/nix/store/rwk30rk5gnqgcv13z986q3w90z1rsq4w-r-munsell-0.5.0' '/nix/store/llna067s123cwm76xrp2a0a578xc9lnn-r-colorspace-2.0-3' '/nix/store/d6d3x7ng4vq3psbljs4p4i0zp2pn60ih-r-R6-2.5.1' '/nix/store/8ff48zlvvrd3q9njyb3nhny3nnbm9jls-r-RColorBrewer-1.1-3' '/nix/store/imdhh4fdnzg458a125lciv4blbw4rsvr-r-viridisLite-0.4.1' '/nix/store/az8dmd42nnkn4lv10vp2nsyfmwfpa8lz-r-tibble-3.1.8' '/nix/store/y8mi36iazwdr90ag6snzqq53vvy1dgin-r-fansi-1.0.3' '/nix/store/yvalibbgiybrycwfdvrz54bd6in08c2y-r-magrittr-2.0.3' '/nix/store/xkc69gksy2a3lw8dqflsw5w7ragrqfhn-r-pillar-1.8.1' '/nix/store/wizbsplgnzfwyhvdzjqnxgqard74y9cz-r-utf8-1.2.2' '/nix/store/8j3rzc7vv3m7cl7gvky5prl9k8nlr28h-r-vctrs-0.5.1' '/nix/store/q20bbv22x2yg6crz9gxy5brcvbl8b2nq-r-pkgconfig-2.0.3' '/nix/store/i1l55ilv5zikarzmn70c2b5qcvmm98wp-r-withr-2.5.0' '/nix/store/7c9kv9lqv8g82ki50xp5mwbx6bq4y8ca-r-cowplot-1.1.1' '/nix/store/imqpqfji7az33r0lgjnj7y58klddhrbj-r-magick-2.7.3' '/nix/store/9jj0h10qjzlsqm6pl8kfqk7sdqav6j6a-r-curl-4.3.3' '/nix/store/6cgmqwsada0mknjysclnc7anwm0c2yzv-r-Rcpp-1.0.9' '/nix/store/yn7zk5z6yqvm2m2lmn873w2mbigqs35d-r-ggtext-0.1.2' '/nix/store/pk6fydsrcdnv1h00c9a400jn6j5w1vyy-r-gridtext-0.1.5' '/nix/store/3yfrf326gaw5vbk32cvkcdgplsrk7j4i-r-jpeg-0.1-10' '/nix/store/gpgh2qssi8lyprp7480pwnkc4h29zqja-r-markdown-1.4' '/nix/store/84svs3x2a8z52vp34yykj9ivz0mjw2wh-r-commonmark-1.8.1' '/nix/store/sqgscvx5apxxfzs5j0klbw5mk89qpm5w-r-mime-0.12' '/nix/store/4yfhypp4g3v36ncy7s07l0x4s12zz4a9-r-xfun-0.35' '/nix/store/9yd8089sqvn7cwhnx1zvliyqiih3bd2a-r-png-0.1-8' '/nix/store/46a7lgw1gkdaa127mzmvhm7bmx3ha0jp-r-stringr-1.5.0' '/nix/store/82w2gpgp5vy5xrv1bc8485vxjpw3anqx-r-stringi-1.7.8' '/nix/store/00qhwfqa1b1dscd8fm10cr20xmnnaw7r-r-xml2-1.3.3' '/nix/store/sabyfarng7zndi9ss6mfm252471ybwgp-r-drc-3.0-1' '/nix/store/6q04bhq53cx79mwmb9vpbmrlzm16ykk2-r-car-3.1-1' '/nix/store/23nqly4lv8kkph83yj59p2r4b11642pv-r-abind-1.4-5' '/nix/store/y4i92320jv0yc7annxg4mv6fxj80m9bx-r-carData-3.0-5' '/nix/store/jlzni1x48kmfkvpfvay9m13g2sw38qwh-r-lme4-1.1-31' '/nix/store/qv3yzd155p392ah93db2zxjylwrmv66b-r-boot-1.3-28.1' '/nix/store/bazlblxh9dgqaz6hraw7jizcvih986kx-r-minqa-1.2.5' '/nix/store/30hl5dmpc4nqbk2mwn0f8y84q74j3rk7-r-nloptr-2.0.3' '/nix/store/xzf1j1q2lxhw9r6lm5g75n3ynvk4xsws-r-testthat-3.1.6' '/nix/store/shyrp6aackny02w3plli68qy573l8qk7-r-brio-1.1.3' '/nix/store/9aawb8kpkxldhq69qp2lr61s3nvvcri4-r-callr-3.7.3' '/nix/store/ilgm414r0pbp7ff3nmhivi0fhm7zib19-r-processx-3.8.0' '/nix/store/xglkh2zncpm05izyhs4r9n72hwgibfsc-r-ps-1.7.2' '/nix/store/zcqap23rf2nfq1zd6dqcpmp7mji29771-r-desc-1.4.2' '/nix/store/27gzs6fsjprcy0i0hy361a81kmk6ihkq-r-rprojroot-2.0.3' '/nix/store/d6p17yrw5c721mipdnjk1habi5y2h1vy-r-digest-0.6.31' '/nix/store/jb5hsbq10zjbkx4f4xszw2z494mlmqwb-r-ellipsis-0.3.2' '/nix/store/8fxrdlzqa23qvnj66b9jsc0kp0vw3hi5-r-evaluate-0.18' '/nix/store/rkfykrq8dnd8bg7l3d3q25dfybmvklh8-r-jsonlite-1.8.4' '/nix/store/9p8sq9mwkaipa2ad2b1ix8gmf8ky098q-r-pkgload-1.3.2' '/nix/store/2f501p1clixjjfhd7i5ycg0957g2g3x8-r-crayon-1.5.2' '/nix/store/j3v01sd5895439xsh5g7nj6k6p10q7j4-r-fs-1.5.2' '/nix/store/zy8q36xw4y38r620li34bh4nmxcqyw11-r-praise-1.0.0' '/nix/store/w18lxalmh1l07766qing21vcplx4jaj8-r-waldo-0.4.0' '/nix/store/c8n6z5jvapw56hb0yx2snlx771rbq8rs-r-diffobj-0.3.5' '/nix/store/igdqk78q477201hxi9h6bfb7syajnvsn-r-rematch2-2.1.2' '/nix/store/q662rkwzmjzhbfmmpz62i13qja0xijws-r-RcppEigen-0.3.3.9.3' '/nix/store/4xbl6wd4bpqycwg5ym5qi4hk2pgxgqrd-r-nnet-7.3-18' '/nix/store/zymqh81lhmq45jdqwxj13f1cgy5akl27-r-pbkrtest-0.5.1' '/nix/store/071cdjs112y4ykwgd0jicn3jz9r7n3kh-r-broom-1.0.1' '/nix/store/z984jrcvcjj4lcs0f9skjvjfgj3fzmg9-r-backports-1.4.1' '/nix/store/m5jvrsg4ia90wlrzls7sjf05sjj48ykf-r-dplyr-1.0.10' '/nix/store/f3qc768y558ymhnsm572l19jbr10mpbj-r-generics-0.1.3' '/nix/store/gy0z7l9qj7k15g3yj301rbz99qy17slh-r-tidyselect-1.2.0' '/nix/store/i0hi6b9yk9bggkb9bmi7cr00s02nlzsr-r-purrr-0.3.5' '/nix/store/dwwpqc6i75nw20jnfkfa52fl9d1c920l-r-tidyr-1.2.1' '/nix/store/96snbajzdardb2c82nqlbrcbqgmlnf18-r-cpp11-0.4.3' '/nix/store/jwq05wpp173yqmiirff3qrgafvqw7vm5-r-knitr-1.41' '/nix/store/m20bldgjxwvh9c8nf1gl1hvkpfncm9gm-r-highr-0.9' '/nix/store/wfqqsw6vqrajwjd9zp3d3bgqsx4xl678-r-yaml-2.3.6' '/nix/store/aqq3j0s2zfc7imqnv237pkwkwd6wwn0f-r-numDeriv-2016.8-1.1' '/nix/store/0m27zc39gijd82ymrg0sx5lql2qgx886-r-quantreg-5.94' '/nix/store/6rqxmp6cmdgdw4djmwkiyd4n91j03yk4-r-MatrixModels-0.5-1' '/nix/store/h0kaz4xq2303ihsmsdnl193qmj99icj9-r-SparseM-1.81' '/nix/store/b9czrg5jm0rvbx0x5lijbsmbna3xyziv-r-survival-3.4-0' '/nix/store/gliwbplcpngpq83cy2cwqqmrv9vc577q-r-gtools-3.9.4' '/nix/store/xfhwq2wxik8pkkkxrdjswnv0j9ci16hi-r-multcomp-1.4-20' '/nix/store/cp81v7ay844k9d3iyflrj7w5wgx1xx06-r-codetools-0.2-18' '/nix/store/3mb1z3p6pi7jy7ara4mkn1qnnrlanpam-r-mvtnorm-1.1-3' '/nix/store/rknym2w2qqqxxrb4pg8lwjh7y72akynz-r-sandwich-3.0-2' '/nix/store/in87qaqj5q358xa517m36jm1n0yg666m-r-zoo-1.8-11' '/nix/store/82z2xihsm51a5xn5vqy9lcf9vbvhbhz6-r-TH.data-1.1-1' '/nix/store/kr1yz878dp4x2qffm802lwqdlbis8wa7-r-plotrix-3.8-2' '/nix/store/hrgh8yrbanafm4mg7y1g33ibbp2ygfg9-r-ggpubr-0.5.0' '/nix/store/dg1k8j38c4nmm6b096a2i5lhqy5kazz5-r-ggrepel-0.9.2' '/nix/store/sj1vjwcxx4z5qxd0m7a9p8s247r54p5s-r-ggsci-2.9' '/nix/store/5lfhpjkwj53n084nlmvwr3xsah1k0mc4-r-ggsignif-0.6.4' '/nix/store/mj289p35nk2f6zx5vq46gaypyh3xgw0v-r-gridExtra-2.3' '/nix/store/szwwyncj3mqddfbjl32dlaa4dzkj0ysd-r-polynom-1.4-1' '/nix/store/fplyhcxccqv24hvzwm4sx5drwl3qf20x-r-rstatix-0.7.1' '/nix/store/fk698p9cisf4r466v32ws1n5k0c8wqla-r-corrplot-0.92' '/nix/store/r3nzip933vvr2h2dp86zspz7jb0sg34i-r-readxl-1.4.1' '/nix/store/y2gn1xiv0hrf92d11jil9igakn8y3dql-r-cellranger-1.1.0' '/nix/store/qczq1zclpjnl5fg0m7ckq7wygxmkni3y-r-rematch-1.0.1' '/nix/store/b6sphzxqgy5has0b4ihjp96bzki0xnmq-r-progress-1.2.2' '/nix/store/wblchxcdk6mjvpkqkkb6p2ljnhphb7b8-r-hms-1.1.2' '/nix/store/d6irs5fhjkbscm73363m8ijdqz0lvcqs-r-prettyunits-1.1.1' '/nix/store/ziqwvmxm3h9f3si4ing0fv9caq12662a-r-randomcoloR-1.1.0.1' '/nix/store/k0nq1xwi5mxpvnpv0ac23aazbnlalrfn-r-cluster-2.1.4' '/nix/store/d4ajwfgw4b3pvcjj38439y8yl7jyw8j9-r-Rtsne-0.16' '/nix/store/mv3by5v3yi3n7zacs8ss67j8fw2f6kgy-r-V8-4.2.2' )
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
prefix='/home/brent/umass/myoV-pi-rebinding/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash'
export shell
shellHook=''
export shellHook
stdenv='/nix/store/cp65c8nk29qq5cl1wyy5qyw103cwmax7-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
        if [ -n "${NIX_LIB64_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib64 ${NIX_LDFLAGS-}";
        fi;
        if [ -n "${NIX_LIB32_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib32 ${NIX_LDFLAGS-}";
        fi;
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}";
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local REMOVE=REMOVE;
    shift;
    while (( $# )); do
        if [ -n "${!1-}" ]; then
            eval "${varName}"="$1";
            return;
        fi;
        shift;
    done;
    echo "Error: _assignFirst found no valid variant!";
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    if [ -d "$fn" ]; then
        cp -pr --reflink=auto -- "$fn" "$(stripHash "$fn")";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                xz -d < "$fn" | tar xf - --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget:-};
    stripAllList=${stripAllList:-};
    stripAllListTarget=${stripAllListTarget:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags:--S}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags:--s}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ -n "${dontRewriteSymlinks-}" ]; then
        return 0;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    forceShare=${forceShare:=man doc info};
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in $forceShare;
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$outputs" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "$shareDocName" ]; then
        local confScript="$configureScript";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    configureFlags="        --bindir=${!outputBin}/bin --sbindir=${!outputBin}/sbin         --includedir=${!outputInclude}/include --oldincludedir=${!outputInclude}/include         --mandir=${!outputMan}/share/man --infodir=${!outputInfo}/share/info         --docdir=${!outputDoc}/share/doc/${shareDocName}         --libdir=${!outputLib}/lib --libexecdir=${!outputLib}/libexec         --localedir=${!outputLib}/share/locale         $configureFlags";
    installFlags="        pkgconfigdir=${!outputDev}/lib/pkgconfig         m4datadir=${!outputDev}/share/aclocal aclocaldir=${!outputDev}/share/aclocal         $installFlags"
}
_multioutDevs ()
{
 
    if [ "$outputs" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$outputs" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $outputs;
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit -1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addRLibPath ()
{
 
    if [[ -d "$1/library" ]]; then
        addToSearchPath R_LIBS_SITE "$1/library";
    fi
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    header "checking for references to $TMPDIR/ in $dir...";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done < <(find "$dir" -type f -print0);
    stopNest
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    : ${makeFlags=};
    if [[ -z "$makeFlags" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" $buildFlags "${buildFlagsArray[@]}");
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" ${checkFlags:-VERBOSE=y} "${checkFlagsArray[@]}" ${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
closeNest ()
{
 
    true
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : ${configureScript=};
    : ${configureFlags=};
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        configureFlags="${prefixKey:---prefix=}$prefix $configureFlags";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                configureFlags="--disable-dependency-tracking $configureFlags";
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                configureFlags="--disable-static $configureFlags";
            fi;
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local flagsArray=($configureFlags "${configureFlagsArray[@]}");
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' $1; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=($distFlags "${distFlagsArray[@]}" ${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit -1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'$search_path'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $outputs;
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $outputs;
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in $setupHooks;
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases:-}" ]; then
        phases="${prePhases:-} unpackPhase patchPhase ${preConfigurePhases:-}             configurePhase ${preBuildPhases:-} buildPhase checkPhase             ${preInstallPhases:-} installPhase ${preFixupPhases:-} fixupPhase installCheckPhase             ${preDistPhases:-} distPhase ${postPhases:-}";
    fi;
    for curPhase in $phases;
    do
        if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
            continue;
        fi;
        if [[ -n $NIX_LOG_FD ]]; then
            echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" 1>&$NIX_LOG_FD;
        fi;
        showPhaseHeader "$curPhase";
        dumpVars;
        local startTime=$(date +"%s");
        eval "${!curPhase:-$curPhase}";
        local endTime=$(date +"%s");
        showPhaseFooter "$curPhase" "$startTime" "$endTime";
        if [ "$curPhase" = unpackPhase ]; then
            [ -z "${sourceRoot}" ] || chmod +x "${sourceRoot}";
            cd "${sourceRoot:-.}";
        fi;
    done
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.39: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.39: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
header ()
{
 
    echo "$1"
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} ${installCheckTarget:-installcheck} > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" $installCheckFlags "${installCheckFlagsArray[@]}" ${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(SHELL=$SHELL $makeFlags "${makeFlagsArray[@]}" $installFlags "${installFlagsArray[@]}" ${installTargets:-install});
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $outputs;
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if rmdir "$srcParent"; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$(readlink -m "$srcParent/..")" 2> /dev/null || true;
            fi;
        done;
    done
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    header "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0);
    stopNest
}
patchPhase ()
{
 
    runHook prePatch;
    for i in ${patches:-};
    do
        header "applying patch $i" 3;
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        $uncompress < "$i" 2>&1 | patch ${patchFlags:--p1};
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    if [[ "$1" == "--host" ]]; then
        pathName=HOST_PATH;
        shift;
    else
        if [[ "$1" == "--build" ]]; then
            pathName=PATH;
            shift;
        fi;
    fi;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f";
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "$pathName" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                exit 1;
            fi;
            newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0);
    stopNest
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( $delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( $H > 0 )) && echo -n "$H hours ";
    (( $M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    case "$phase" in 
        unpackPhase)
            header "unpacking sources"
        ;;
        patchPhase)
            header "patching sources"
        ;;
        configurePhase)
            header "configuring"
        ;;
        buildPhase)
            header "building"
        ;;
        checkPhase)
            header "running tests"
        ;;
        installPhase)
            header "installing"
        ;;
        fixupPhase)
            header "post-installation fixup"
        ;;
        installCheckPhase)
            header "running install tests"
        ;;
        *)
            header "$phase"
        ;;
    esac
}
stopNest ()
{
 
    true
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local pathsNew=;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        find $paths -type f -a '!' -wholename "$prefix/lib/debug/*" -exec $cmd $stripFlags '{}' \; 2> /dev/null;
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        case "$1" in 
            --replace)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        echo "substituteStream(): WARNING: pattern '$pattern' doesn't match anything in $description" 1>&2;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    header "unpacking source archive $curSrc" 3;
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in $srcs;
    do
        unpackFile "$i";
    done;
    : ${sourceRoot=};
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0'                     | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH:$nix_saved_PATH"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
